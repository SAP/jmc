<jfragent>
    <config>
        <classprefix>__JFREvent</classprefix>
        <allowtostring>false</allowtostring>
        <allowconverter>true</allowconverter>
    </config>
    <events>
        <event id="jdk.log.unsafeMemoryAlloc">
            <label>unsafeMemAlloc</label>
            <description>Memory trace of Unsafe allocations</description>
            <class>jdk.internal.misc.Unsafe</class>
            <stacktrace>true</stacktrace>
            <rethrow>false</rethrow>
            <path>jdk/log/Unsafe/memoryTrace</path>
            <method>
                <name>allocateMemory</name>
                <descriptor>(J)J</descriptor>
                <parameters>
                    <parameter index="0">
                        <name>size</name>
                        <description>The allocated size</description>
                        <converter>org.openjdk.jmc.agent.sap.boot.converters.UnsafeMemoryAllocationLogger.logSize(J)J</converter>
                    </parameter>
                </parameters>
                <returnvalue>
                    <name>address</name>
                    <description>the allocated address</description>
                    <converter>org.openjdk.jmc.agent.sap.boot.converters.UnsafeMemoryAllocationLogger.logResult(J)J</converter>
                </returnvalue>
            </method>
        </event>
        <event id="jdk.log.unsafeMemoryRealloc">
            <label>unsafeMemRealloc</label>
            <description>Memory trace of Unsafe reallocations</description>
            <class>jdk.internal.misc.Unsafe</class>
            <stacktrace>true</stacktrace>
            <rethrow>false</rethrow>
            <path>jdk/log/Unsafe/memoryTrace</path>
            <method>
                <name>reallocateMemory</name>
                <descriptor>(JJ)J</descriptor>
                <parameters>
                    <parameter index="0">
                        <name>oldAddress</name>
                        <description>The old memory address</description>
                        <converter>org.openjdk.jmc.agent.sap.boot.converters.UnsafeMemoryAllocationLogger.logPtr()V</converter>
                    </parameter>
                    <parameter index="1">
                        <name>size</name>
                        <description>The new allocated size</description>
                        <converter>org.openjdk.jmc.agent.sap.boot.converters.UnsafeMemoryAllocationLogger.logSize()V</converter>
                    </parameter>
                </parameters>
                <returnvalue>
                    <name>address</name>
                    <description>the allocated address</description>
                    <converter>org.openjdk.jmc.agent.sap.boot.converters.UnsafeMemoryAllocationLogger.logResult()V</converter>
                </returnvalue>
            </method>
        </event>
        <event id="jdk.log.unsafeMemoryFree">
            <label>unsafeMemFree</label>
            <description>Memory trace of Unsafe frees</description>
            <class>jdk.internal.misc.Unsafe</class>
            <stacktrace>true</stacktrace>
            <rethrow>false</rethrow>
            <path>jdk/log/Unsafe/memoryTrace</path>
            <method>
                <name>freeMemory</name>
                <descriptor>(J)V</descriptor>
                <parameters>
                    <parameter index="0">
                        <name>size</name>
                        <description>The freed memory address</description>
                        <converter>org.openjdk.jmc.agent.sap.boot.converters.UnsafeMemoryAllocationLogger.logFree()V</converter>
                    </parameter>
                </parameters>
            </method>
        </event>
    </events>
</jfragent>
